name: Build and Push to ECR

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get -y install docker-compose

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: 837056842523.dkr.ecr.us-east-1.amazonaws.com/soltax

      - name: Build and Push Docker Images to ECR
        env:
          ECR_REGISTRY: 837056842523.dkr.ecr.us-east-1.amazonaws.com/soltax
        run: |
            SERVICES=$(docker-compose config --services)
            for SERVICE in $SERVICES; do
                # if the service has a Dockerfile build it and tag it 
                DOCKERFILE="$(docker-compose config | yq eval '.services["'$SERVICE'"].build' -)"
                if [ "$DOCKERFILE" != "null" ]; then
                    echo "the $SERVICE has a dockerfile "
                    echo "print all images"
                    docker images -a
                else  
                    echo "the $SERVICE NOT has a dockerfile"

                fi
                  
            done

  # SERVICES=$(docker-compose config --services) 
          # for SERVICE in $SERVICES; do
          #   IMAGE_NAME="$ECR_REGISTRY/$SERVICE:latest"
          #   if [ "$(docker-compose ps -q $SERVICE)" ]; then
          #     echo "Skipping $SERVICE because it's using an image from a registry"
          #   else
          #     # If the service has a Dockerfile, build it and tag it with the ECR repository URL
          #     DOCKERFILE="$(docker-compose config | yq eval '.services["'$SERVICE'"].build' -)"
          #     if [ "$DOCKERFILE" != "null" ]; then
          #       docker-compose build $SERVICE
          #       docker tag $SERVICE:latest $IMAGE_NAME
          #       docker push $IMAGE_NAME
          #     else
          #       echo "Skipping $SERVICE because it does not have a Dockerfile"
          #     fi
          #   fi
          # done
